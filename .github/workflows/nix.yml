# Taken liberally from https://github.com/malob/nixpkgs/blob/master/.github/workflows/ci.yml
name: Build nixos profiles

on:
  workflow_dispatch:
    inputs:
      update-nix-inputs:
        description: "whether to update nix flake inputs"
        required: false
        default: "yes"
      deploy-to-nodes:
        description: "whether to deploy to nodes"
        required: false
        default: "yes"
  pull_request:
    branches:
      - master
      - main
      - actions
      - ci
      - "releases/*"
    paths:
      - "*.nix"
      - "**/*.nix"
      - "nix/**"
      - "flake.lock"
  push:
    branches:
      - master
      - main
      - actions
      - ci
      - "releases/*"
    paths:
      - "*.nix"
      - "**/*.nix"
      - "nix/**"
      - "flake.lock"
  schedule:
    - cron: "0 16 * * 1"
    - cron: "0 16 * * 3"
    - cron: "0 16 * * 5"

jobs:
  nixos:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        nix-system:
          - "x86_64-linux"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.5pre20211026_5667822/install
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org/ https://hydra.iohk.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Update nix flake inputs
        id: update-nix-inputs
        if: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.update-nix-inputs == 'yes')) }}
        run: |
          set -xeuo pipefail
          echo '::set-output name=didTryToUpdateNixInputs::yes'
          nix flake update

          # Remove broken packages in ./nix/broken-packages.nix when the package can now be built.
          # TODO: x86 and arm may have different set of broken packages.
          list="$(nix eval --impure --raw --expr 'builtins.toJSON (import ./nix/broken-packages.nix)' | jq --raw-output '.[]')"
          xargs -I '{}' bash -c 'if ! nix build ".#{}"; then echo {} >> ./nix/broken-packages; fi' <<< "$list"
          jq --raw-input . < ./nix/broken-packages | jq --slurp . | jq 'sort_by(.) | unique' > ./nix/broken-packages.json
          nix eval --impure --expr 'builtins.fromJSON (builtins.readFile ./nix/broken-packages.json)' > ./nix/broken-packages.nix

          git status
          if ! git diff; then
              echo "Abort now. No updates available."
              echo '::set-output name=shouldAbort::yes'
          fi
          git commit --all --message "automatically update flake inputs at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: Set up common variables
        id: variables
        run: |
          export deployHost=mdq deployHostSystem=x86_64-linux masterNixSystem=x86_64-linux
          echo "::set-output name=deployHost::$deployHost"
          echo "::set-output name=deployHostSystem::$deployHostSystem"
          echo "::set-output name=masterNixSystem::$masterNixSystem"

          echo '::set-output name=cachixName::${{ github.repository_owner }}'
          echo '::set-output name=cachixPushFilter::clion|webstorm|idea-ultimate|goland|pycharm-professional|datagrip|android-studio-dev|graalvm11-ce|lock$|-source$'

          if [[ '${{ steps.update-nix-inputs.outputs.shouldAbort }}' != 'yes' ]]; then
              echo '::set-output name=shouldBuildNixos::yes'

              if [[ '${{ steps.update-nix-inputs.outputs.didTryToUpdateNixInputs }}' == 'yes' ]]; then
                  echo '::set-output name=shouldPushUpdates::yes'
              fi

              if [[ "${{ matrix.nix-system }}" != "x86_64-linux" ]]; then
                  echo '::set-output name=shouldSetupQemu::yes'
              fi

              if [[ "${{ matrix.nix-system }}" == "$deployHostSystem" ]]; then
                  echo '::set-output name=shouldBuildDeployNodeNixos::yes'

                  case '${{ github.event_name }}' in
                      'push')
                          echo '::set-output name=shouldDeployToNode::yes'
                          break
                          ;;
                      'workflow_dispatch')
                          if [[ '${{ github.event.inputs.deploy-to-nodes }}' == 'yes' ]]; then
                              echo '::set-output name=shouldDeployToNode::yes'
                          fi
                          break
                          ;;
                      *)
                          break
                          ;;
                  esac
              fi
          fi

      - name: Setup cachix
        if: ${{ steps.variables.outputs.shouldBuildNixos == 'yes' }}
        uses: cachix/cachix-action@v10
        with:
          name: ${{ steps.variables.outputs.cachixName }}
          extraPullNames: iohk
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          pushFilter: ${{ steps.variables.outputs.cachixPushfilter }}

      # https://github.com/actions/virtual-environments/issues/2840#issuecomment-790492173
      # https://github.com/actions/virtual-environments/issues/709
      - name: Free some disk space
        if: ${{ steps.variables.outputs.shouldBuildNixos == 'yes' }}
        run: |
          set +e
          echo "=============================================================================="
          echo "Listing 100 largest packages"
          echo "=============================================================================="
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          echo "=============================================================================="
          echo "Removing large packages"
          echo "=============================================================================="
          sudo snap remove chromium
          sudo snap remove gnome
          sudo snap remove lxd
          sudo apt-get remove -y '^ghc-.*'
          sudo apt-get remove -y '^adoptopenjdk-.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'libllvm.*'
          sudo apt-get remove -y 'libclang.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y '^mysql-server.*'
          sudo apt-get remove -y '^mongodb.*'
          sudo apt-get remove -y azure-cli
          sudo apt-get remove -y google-cloud-sdk
          sudo apt-get remove -y hhvm
          sudo apt-get remove -y google-chrome-stable
          sudo apt-get remove -y firefox
          sudo apt-get remove -y libgl1-mesa-dri
          sudo apt-get remove -y powershell
          sudo apt-get remove -y snapd
          sudo apt-get clean
          echo "=============================================================================="
          echo "Removing large directories"
          echo "=============================================================================="
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /root/.nuget
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/rust
          sudo rm -rf /usr/share/swift
          sudo rm -rf /var/lib/snapd
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /home/linuxbrew/.linuxbrew
          sudo rm -rf /usr/local/.ghcup/ghc
          echo "=============================================================================="
          echo "Showing disk usage"
          echo "=============================================================================="
          df -h

      # github actions does not support virtualization yet https://github.com/actions/virtual-environments/issues/183
      - name: Install qemu on ${{ matrix.nix-system }}
        if: ${{ steps.variables.outputs.shouldSetupQemu == 'yes' }}
        run: |
          sudo env DEBIAN_FRONTEND=noninteractive apt-get update -q -y
          case '${{ matrix.nix-system }}' in
              'aarch64-linux')
                  sudo env DEBIAN_FRONTEND=noninteractive apt-get install -q -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
                  break
                  ;;
              *)
                  echo "Unknown system: ${{ matrix.nix-system }}"
                  break
                  ;;
          esac

          mkdir -p ~/.config/nix
          sudo mkdir -p /etc/nix
          cat <<EOF | tee -a ~/.config/nix/nix.conf
          sandbox = false
          system = ${{ matrix.nix-system }}
          extra-platforms = ${{ matrix.nix-system }}
          system-features = ${{ matrix.nix-system }} arm-linux x86_64-linux
          EOF

      - name: Build ${{ matrix.nix-system }} nixos
        if: ${{ steps.variables.outputs.shouldBuildNixos == 'yes' }}
        run: |
          make HOST=cicd-${{ matrix.nix-system }} nixos-build nixos-profile-path-info
          df -h

      # In case following steps failed, we can still push build results from the preceding steps.
      # Waiting for https://github.com/cachix/cachix-action/issues/83 to land
      # Command copied from https://github.com/cachix/cachix-action/blob/37b92535c36e3c2071fa5ef392ae43e396e640b4/dist/main/index.js#L1090
      - name: Push build results to cachix
        if: ${{ steps.variables.outputs.shouldBuildNixos == 'yes' }}
        run: |
          $HOME/work/_actions/cachix/cachix-action/*/dist/main/list-nix-store.sh "$HOME/.nix-profile/bin/cachix" "${{ steps.variables.outputs.cachixName }}" "${{ steps.variables.outputs.cachixPushfilter }}"

      - name: Build deploy node nixos
        if: ${{ steps.variables.outputs.shouldBuildDeployNodeNixos == 'yes' }}
        run: |
          make HOST=${{ steps.variables.outputs.deployHost }} nixos-build nixos-profile-path-info
          df -h

      # Following steps need these caches.
      # Command copied from https://github.com/cachix/cachix-action/blob/37b92535c36e3c2071fa5ef392ae43e396e640b4/dist/main/index.js#L1090
      - name: Push build results to cachix
        if: ${{ steps.variables.outputs.shouldBuildDeployNodeNixos == 'yes' }}
        run: |
          $HOME/work/_actions/cachix/cachix-action/*/dist/main/list-nix-store.sh "$HOME/.nix-profile/bin/cachix" "${{ steps.variables.outputs.cachixName }}" "${{ steps.variables.outputs.cachixPushfilter }}"

      - name: Import vault token
        if: ${{ steps.variables.outputs.shouldDeployToNode == 'yes' }}
        uses: hashicorp/vault-action@v2.4.0
        with:
          method: approle
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportToken: true
          exportEnv: true
          secrets: |
            ssh-host-signer/config/ca public_key | SSH_CA_PUBLIC_KEY ;

      - name: Deploy to node
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
        if: ${{ steps.variables.outputs.shouldDeployToNode == 'yes' }}
        run: |
          set -euo pipefail
          nix profile install -f '<nixpkgs>' vault wstunnel openssh
          echo y | ssh-keygen -f $HOME/.ssh/id_ed25519 -t ed25519 -P ""
          vault write -field=signed_key ssh-client-signer/sign/ssh-deployment public_key=@$HOME/.ssh/id_ed25519.pub > $HOME/.ssh/id_ed25519-cert.pub
          echo "$SSH_CONFIG" >> ~/.ssh/config
          echo "@cert-authority * $SSH_CA_PUBLIC_KEY" >> ~/.ssh/known_hosts
          make EXTRADEPLOYFLAGS="--ssh-user="$(ssh-keygen -Lf $HOME/.ssh/id_ed25519-cert.pub | awk '/Principals:/ {getline; print $1}')" --fast-connection=false --auto-rollback=true --magic-rollback=true" HOST="${{ steps.variables.outputs.deployHost }}" nixos-deploy

      - name: Push commit with updated inputs
        if: ${{ steps.variables.outputs.shouldPushUpdates == 'yes' }}
        run: |
          # Flake upstreams may update dependencies. In that case, `flake.lock` may have been changed.
          if git --no-pager diff; then
              git commit --all --amend --no-edit
          fi
          # Tackle a race case that master branch has been updated while running this workflow.
          git pull --rebase
          # Only push to master branch when we are building the master nix system
          if [[ '${{ matrix.nix-system }}' == '${{ steps.variables.outputs.masterNixSystem }}' ]]; then git push; fi
          git switch -C ${{ matrix.nix-system }}
          git push --force-with-lease origin ${{ matrix.nix-system }}:${{ matrix.nix-system }}
