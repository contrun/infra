# Taken liberally from https://github.com/malob/nixpkgs/blob/master/.github/workflows/ci.yml
name: Nix

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - master
      - main
      - actions
      - ci
      - "releases/*"
    paths:
      - "**/*.nix"
      - "**/flake.lock"
      - ".github/workflows/nix.yml"
  push:
    branches:
      - master
      - main
      - actions
      - ci
      - "releases/*"
    paths:
      - "**/*.nix"
      - "**/flake.lock"
      - ".github/workflows/nix.yml"
  schedule:
    - cron: "0 20 * * 4"
    - cron: "0 20 * * 0"

jobs:
  nixos-profiles:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        nix-system:
          - "x86_64-linux"
          - "aarch64-linux"

    steps:
      - name: Set up common variables
        id: variables
        run: |
          echo '::set-output name=deployHost::mdq'
          echo '::set-output name=deployHostSystem::x86_64-linux'
          echo '::set-output name=cachixName::${{ github.repository_owner }}'
          echo '::set-output name=cachixPushFilter::clion|webstorm|idea-ultimate|goland|pycharm-professional|datagrip|android-studio-dev|graalvm11-ce|lock$|-source$'

      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v14
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.4pre20210823_af94b54/install
          extra_nix_config: |
            experimental-features = nix-command flakes ca-references
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org/ https://hydra.iohk.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

      - name: Check inputs up to date
        id: check-nix-inputs-update-available
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        run: |
          set -xeuo pipefail
          nix flake update
          # Not work for now, as packages are not built in github actions yet.
          # echo "[]" > nix/broken-packages.json
          git status
          if ! git diff; then
              echo "Abort now. No updates available."
              # No way for github actions workflow to earyly return
              # Make sure later steps check noUpdateShouldAbort == 'yes'
              echo '::set-output name=noUpdateShouldAbort::yes'
          fi
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git commit --all --message "auto update nix inputs at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: Setup Cachix
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' }}
        uses: cachix/cachix-action@v10
        with:
          name: ${{ steps.variables.outputs.cachixName }}
          extraPullNames: iohk
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          pushFilter: ${{ steps.variables.outputs.cachixPushfilter }}

      - name: Install qemu
        if: ${{ matrix.nix-system == 'aarch64-linux' && steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' }}
        run: |
          sudo env DEBIAN_FRONTEND=noninteractive apt-get update -q -y
          sudo env DEBIAN_FRONTEND=noninteractive apt-get install -q -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
          mkdir -p ~/.config/nix
          sudo mkdir -p /etc/nix
          cat <<EOF >> ~/.config/nix/nix.conf
          sandbox = false
          system = ${{ matrix.nix-system }}
          extra-platforms = ${{ matrix.nix-system }}
          system-features = ${{ matrix.nix-system }} arm-linux
          EOF
          cat ~/.config/nix/nix.conf

      # https://github.com/actions/virtual-environments/issues/2840#issuecomment-790492173
      # https://github.com/actions/virtual-environments/issues/709
      - name: Free some disk space
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' }}
        run: |
          set +e
          echo "=============================================================================="
          echo "Listing 100 largest packages"
          echo "=============================================================================="
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          echo "=============================================================================="
          echo "Removing large packages"
          echo "=============================================================================="
          sudo snap remove chromium
          sudo snap remove gnome
          sudo snap remove lxd
          sudo apt-get remove -y '^ghc-.*'
          sudo apt-get remove -y '^adoptopenjdk-.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'libllvm.*'
          sudo apt-get remove -y 'libclang.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y '^mysql-server.*'
          sudo apt-get remove -y '^mongodb.*'
          sudo apt-get remove -y azure-cli
          sudo apt-get remove -y google-cloud-sdk
          sudo apt-get remove -y hhvm
          sudo apt-get remove -y google-chrome-stable
          sudo apt-get remove -y firefox
          sudo apt-get remove -y libgl1-mesa-dri
          sudo apt-get remove -y powershell
          sudo apt-get remove -y snapd
          sudo apt-get clean
          echo "=============================================================================="
          echo "Removing large directories"
          echo "=============================================================================="
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /root/.nuget
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/rust
          sudo rm -rf /usr/share/swift
          sudo rm -rf /var/lib/snapd
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /home/linuxbrew/.linuxbrew
          sudo rm -rf /usr/local/.ghcup/ghc
          echo "=============================================================================="
          echo "Showing disk usage"
          echo "=============================================================================="
          df -h

      - name: Build deploy node nixos
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' && matrix.nix-system == steps.variables.outputs.deployHostSystem }}
        run: |
          make nixos-build HOST=${{ steps.variables.outputs.deployHost }}
          nix path-info --impure -sShr '.#nixosConfigurations.${{ steps.variables.outputs.deployHost }}.config.system.build.toplevel' > path-info
          sort -h -k2 < path-info
          sort -h -k3 < path-info
          df -h

      - name: Build nixos
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' }} }}
        run: |
          build() {
              nix build --impure --system ${{ matrix.nix-system }} --extra-system-features ${{ matrix.nix-system }} --extra-system-features x86_64-linux --extra-extra-platforms ${{ matrix.nix-system }} --extra-extra-platforms x86_64-linux --no-sandbox --show-trace --keep-going --keep-failed --fallback '.#nixosConfigurations.cicd-${{ matrix.nix-system }}.config.system.build.toplevel'
          }
          # Build a minimal nixos system
          # github actions does not support virtualization yet https://github.com/actions/virtual-environments/issues/183
          build
          # Not work for now, as packages are not built in github actions yet.
          # if ! build; then
          #     git checkout "$(git log --pretty=format:"%H" --skip 1 -1 -- nix/broken-packages.json)" -- nix/broken-packages.json
          #     git commit --all --amend --no-edit
          #     build
          # fi
          nix path-info --impure -sShr '.#nixosConfigurations.cicd-${{ matrix.nix-system }}.config.system.build.toplevel' > path-info
          sort -h -k2 < path-info
          sort -h -k3 < path-info
          df -h

      # Following steps need these caches.
      # Command copied from https://github.com/cachix/cachix-action/blob/37b92535c36e3c2071fa5ef392ae43e396e640b4/dist/main/index.js#L1090
      - name: Push build results to cachix
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' }}
        run: |
          $HOME/work/_actions/cachix/cachix-action/*/dist/main/list-nix-store.sh "$HOME/.nix-profile/bin/cachix" "${{ steps.variables.outputs.cachixName }}" "${{ steps.variables.outputs.cachixPushfilter }}"

      - name: Import vault token
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' && matrix.nix-system == steps.variables.outputs.deployHostSystem }}
        uses: hashicorp/vault-action@v2.3.1
        with:
          method: approle
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportToken: true
          exportEnv: true
          secrets: |
            ssh-host-signer/config/ca public_key | SSH_CA_PUBLIC_KEY ;

      - name: Deploy to node
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' && matrix.nix-system == steps.variables.outputs.deployHostSystem }}
        run: |
          set -euo pipefail
          nix profile install -f '<nixpkgs>' vault wstunnel openssh
          echo y | ssh-keygen -f $HOME/.ssh/id_ed25519 -t ed25519 -P ""
          vault write -field=signed_key ssh-client-signer/sign/ssh-deployment public_key=@$HOME/.ssh/id_ed25519.pub > $HOME/.ssh/id_ed25519-cert.pub
          echo "$SSH_CONFIG" >> ~/.ssh/config
          echo "@cert-authority * $SSH_CA_PUBLIC_KEY" >> ~/.ssh/known_hosts
          nix run github:serokell/deploy-rs -- --skip-checks --ssh-user="$(ssh-keygen -Lf $HOME/.ssh/id_ed25519-cert.pub | awk '/Principals:/ {getline; print $1}')" --fast-connection=false --auto-rollback=true --magic-rollback=true --debug-logs ".#${{ steps.variables.outputs.deployHost }}" -- --impure

      - name: Push commit with updated inputs
        if: ${{ steps.check-nix-inputs-update-available.outputs.noUpdateShouldAbort != 'yes' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
        run: |
          # Tackle a race case that master branch has been updated while running this workflow.
          git pull --rebase
          # Only push x86_64-linux updates to master branch.
          if [[ '${{ matrix.nix-system }}' == 'x86_64-linux' ]]; then git push; fi
          git switch -C ${{ matrix.nix-system }}
          git push --force-with-lease origin ${{ matrix.nix-system }}:${{ matrix.nix-system }}
