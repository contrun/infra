user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

stream {
    log_format format '$remote_addr [$time_iso8601] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time "$upstream_addr" '
                     '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    access_log  /var/log/nginx/access.log format;

    map $ssl_preread_server_name $ssl_backend {
{% if backend_servers is defined %}
{% for h in backend_servers %}
{% for b in h.backends %}
        ~^([^.]+\.)*(?P<my_hostname>{{ h.host }})\.[^.]+\.[^.]+$  {{ b }}:$server_port;
{% endfor %}
{% endfor %}
{% endif %}
        ~^([^.]+\.)*(?P<my_hostname>[^.]+)\.[^.]+\.[^.]+$   $my_hostname:$server_port;
{% if default_backend_server is defined %}
        default {{ default_backend_server }}:$server_port;
{% endif %}
    }

    map $hostname $backend {
{% if backend_servers is defined %}
{% for h in backend_servers %}
{% for b in h.backends %}
        ~^([^.]+\.)*(?P<my_hostname>{{ h.host }})\.[^.]+\.[^.]+$  {{ b }}:$server_port;
{% endfor %}
{% endfor %}
{% endif %}
        ~^([^.]+\.)*(?P<my_hostname>[^.]+)\.[^.]+\.[^.]+$   $my_hostname:$server_port;
        default $ssl_backend;
    }

    resolver {{ resolvers | join(' ') }} ipv6=off;

    server {
{% for port in tcp_forwarding_ports %}
        listen 0.0.0.0:{{ port }} reuseport;
{% endfor %}
{% for port in udp_forwarding_ports %}
        listen 0.0.0.0:{{ port }} udp reuseport;
{% endfor %}
        proxy_pass $backend;
       	proxy_protocol on;
        ssl_preread on;
    }
}
