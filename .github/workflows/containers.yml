name: Build container images

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 16 * * 5"
  push:
    branches:
      - master
      - main
      - actions
      - ci
      - "releases/*"
    paths:
      - ".github/workflows/containers.yml"

jobs:
  container:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repository:
          - "contrun/kosyncsrv"
          - "bookwyrm-social/bookwyrm"
          - "200ok-ch/organice"
          - "elasticdog/tiddlywiki-docker"
          - "logseq/logseq"
          # Images not working for now.
          # - "DeviaVir/zenbot"

    steps:
      - name: Set upstream information
        id: upstream
        run: |
          repository=${{ matrix.repository }}

          case "$repository" in
            "elasticdog/tiddlywiki-docker")
              name=tiddlywiki
              ;;

            *)
              name="$(awk -F / '{print $2}' <<< "$repository")"
              ;;
          esac

          case "$repository" in
            *)
              directory="$name"
              ;;
          esac

          case "$repository" in
            *)
              platforms="linux/amd64,linux/arm64"
              ;;
          esac

          echo "::set-output name=name::$name"
          echo "::set-output name=directory::$directory"
          echo "::set-output name=platforms::$platforms"
          echo "::set-output name=repository::$repository"

      - name: Checkout ${{ steps.upstream.outputs.repository }} to ${{ steps.upstream.outputs.name }}
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.upstream.outputs.repository }}
          path: ${{ steps.upstream.outputs.directory }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Get docker environment
        id: env
        working-directory: ${{ steps.upstream.outputs.directory }}
        run: |
          set -xeuo pipefail
          [[ -z "${DOCKER_HUB_USERNAME:-}" ]] && DOCKER_HUB_USERNAME="$(awk -F / '{print $1}' <<< "$GITHUB_REPOSITORY")"
          PACKAGE_NAME=${{ steps.upstream.outputs.name }}
          DOCKER_TAG="$(git log --format="%H" -n 1)"
          DOCKER_HUB_URL="$DOCKER_HUB_USERNAME/$PACKAGE_NAME"
          DOCKER_IMAGE="$DOCKER_HUB_URL:$DOCKER_TAG"
          DOCKER_IMAGE_CACHE="$DOCKER_HUB_URL:cache"
          DOCKER_IMAGE_LATEST="$DOCKER_HUB_URL:latest"
          echo "::set-output name=PACKAGE_NAME::$PACKAGE_NAME"
          echo "::set-output name=DOCKER_HUB_USERNAME::$DOCKER_HUB_USERNAME"
          echo "::set-output name=DOCKER_IMAGE::$DOCKER_IMAGE"
          echo "::set-output name=DOCKER_IMAGE_LATEST::$DOCKER_IMAGE_LATEST"
          echo "::set-output name=DOCKER_IMAGE_CACHE::ghcr.io/$DOCKER_IMAGE_CACHE"
          echo "::set-output name=DOCKER_TAGS::ghcr.io/$DOCKER_IMAGE,ghcr.io/$DOCKER_IMAGE_LATEST,$DOCKER_IMAGE,$DOCKER_IMAGE_LATEST"

          case "${{ steps.upstream.outputs.repository }}" in
            "DeviaVir/zenbot")
              sed -i 's/npm install/env LIBSASS_EXT=no npm install/g' Dockerfile
              ;;
            "bookwyrm-social/bookwyrm")
              # In the official Dockerfile, the code is not added to the container image.
              # See https://github.com/bookwyrm-social/bookwyrm/blob/de0c50196ee74e062d9d023c536a7f8af458b2d2/Dockerfile
              sed -i '/RUN pip install -r requirements.txt --no-cache-dir/a COPY . /app' Dockerfile
              echo >> bookwyrm/settings.py
              echo 'INSTALLED_APPS.append("django.contrib.sites")' >> bookwyrm/settings.py
              echo 'SITE_ID = int(env("SITE_ID", 1))' >> bookwyrm/settings.py
              ;;
          esac

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ steps.env.outputs.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.upstream.outputs.directory }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ steps.upstream.outputs.platforms }}
          tags: ${{ steps.env.outputs.DOCKER_TAGS }}
          cache-from: ${{ steps.env.outputs.DOCKER_IMAGE_CACHE }}
          cache-to: ${{ steps.env.outputs.DOCKER_IMAGE_CACHE }}
