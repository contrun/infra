name: Build large nix packages

on:
  push:
    branches:
      - "x86_64-linux"
      - "aarch64-linux"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "expression"
            # TODO: any better way to build overrided virtualbox derivation?
            data: |
              with (builtins.getFlake (builtins.toString ./.));
              let
                systemPackages = nixosConfigurations.maximal-x86_64-linux.config.environment.systemPackages;
                packages = builtins.filter (p: builtins.match "virtualbox-.*" p.name != null) systemPackages;
                package = builtins.elemAt packages 0;
              in package
            system: "x86_64-linux"
          - type: "package"
            data: "config.boot.kernelPackages.kernel"
            system: "x86_64-linux"
          - type: "package"
            data: "pkgs.clojure-lsp"
            system: "x86_64-linux"
          - type: "package"
            data: "pkgs.llvmPackages_latest.llvm"
            system: "x86_64-linux"

    steps:
      - name: Set up common variables
        if: steps.update-nix-inputs.outputs.shouldAbort != 'yes'
        id: variables
        env:
          DATA: ${{ matrix.data }}
        run: |
          set_output() {
              for v in "$@"; do
                  echo "::set-output name=$v::${!v}"
              done
          }

          system=${{ matrix.system }}
          freeDiskSpace=${{ matrix.free-disk-space }}
          shouldSkip=false
          case '${{ github.event_name }}' in
              'push')
                  if [[ "${{ github.ref_name }}" != "${{ matrix.system }}" ]]; then
                      shouldSkip=true
                  fi
                  ;;
              *)
                  :
                  ;;
          esac

          case '${{ matrix.type }}' in
              'expression')
                  nixExpressionBase64="$(base64 -w 0 <<< "$DATA")"
                  ;;
              'package')
                  nixExpressionBase64="$(base64 -w 0 <<< 'with (builtins.getFlake (builtins.toString ./.)); nixosConfigurations.maximal-${{ matrix.system }}.${{ matrix.data }}')"
                  ;;
              *)
                  exit 1
                  ;;
          esac

          set_output system freeDiskSpace shouldSkip nixExpressionBase64

      - name: Checkout repository
        if: steps.variables.outputs.shouldSkip != 'true'
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup nix
        if: steps.variables.outputs.shouldSkip != 'true'
        uses: ./
        with:
          setup-cachix: true
          cachix-auth-token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          setup-qemu: true
          free-disk-space: false
          nix-systems: "${{ steps.variables.outputs.system }}"

      - name: Build the package
        if: steps.variables.outputs.shouldSkip != 'true'
        run: |
          base64 -d <<< "${{ steps.variables.outputs.nixExpressionBase64 }}" | tee temp.nix
          nix build -f temp.nix

  # Rebuildng with some disk spaces freed.
  # TODO: find a way to reuse the matrix above.
  retry-building:
    runs-on: ubuntu-latest
    needs: build
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup nix
        uses: ./
        with:
          setup-cachix: true
          cachix-auth-token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          setup-qemu: true
          free-disk-space: true
          nix-systems: "${{ needs.build.steps.variables.outputs.system }}"

      - name: Build the package
        run: |
          base64 -d <<< "${{ needs.build.steps.variables.outputs.nixExpressionBase64 }}" | tee temp.nix
          nix build -f temp.nix
