# Taken liberally from https://github.com/malob/nixpkgs/blob/master/.github/workflows/ci.yml
name: Build nixos profiles

on:
  workflow_call:
    inputs:
      host:
        description: "which host profile to build"
        type: string
        required: true
        default: "cicd-x86_64-linux"
      nix-system:
        description: "which system this host uses"
        type: string
        required: true
        default: "x86_64-linux"
      deploy-to-node:
        description: "deploy to nodes"
        type: boolean
        default: false
        required: false
      free-disk-space:
        description: "free disk space"
        type: boolean
        default: false
        required: false
      ignore-errors:
        description: "ignore errors"
        type: boolean
        default: false
        required: false
      update-nix-inputs:
        description: "update nix inputs"
        type: boolean
        default: false
        required: false

jobs:
  build-nixos:
    outputs:
      shouldPushUpdates: ${{ steps.variables.outputs.shouldPushUpdates || 'no' }}
    runs-on: ubuntu-latest
    continue-on-error: "${{ inputs.ignore-errors }}"
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup nix
        uses: ./
        with:
          setup-cachix: true
          cachix-push-filter: "clion|webstorm|idea-ultimate|goland|pycharm-professional|datagrip|android-studio-dev|graalvm11-ce|lock$|-source$"
          setup-qemu: true
          free-disk-space: "${{ inputs.free-disk-space }}"
          nix-systems: "${{ inputs.nix-system }}"
          cachix-auth-token: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Update nix flake inputs
        id: check-nix-inputs
        if: format('{0}', inputs.update-nix-inputs) == 'true'
        run: |
          set -xeuo pipefail
          echo "didTryToUpdateNixInputs=yes" >> $GITHUB_OUTPUT
          nix flake update

          # Remove broken packages in ./nix/broken-packages.nix when the package can now be built.
          # TODO: x86 and arm may have different set of broken packages.
          list="$(nix eval --impure --raw --expr 'builtins.toJSON (import ./nix/broken-packages.nix)' | jq --raw-output '.[]')"
          xargs -I '{}' bash -c 'if ! nix build ".#{}"; then echo {} >> ./nix/broken-packages; fi' <<< "$list"
          jq --raw-input . < ./nix/broken-packages | jq --slurp . | jq 'sort_by(.) | unique' > ./nix/broken-packages.json
          nix eval --impure --expr 'builtins.fromJSON (builtins.readFile ./nix/broken-packages.json)' > ./nix/broken-packages.nix

          git status
          if ! git diff; then
              echo "Abort now. No updates available."
              echo "shouldAbort=yes" >> $GITHUB_OUTPUT
          fi
          # Use the same branch to avoid garbage collection
          branch="created-by-github-actions"
          git commit --all --message "automatically update flake inputs at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          git switch -C "$branch"

      - name: Set up common variables
        if: steps.check-nix-inputs.outputs.shouldAbort != 'yes'
        id: variables
        run: |
          host="${{ inputs.host }}"
          echo "host=$host" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
          echo "nixSystem=${{ inputs.nix-system }}" >> $GITHUB_OUTPUT

          echo "shouldBuildNixos=yes" >> $GITHUB_OUTPUT

          if [[ '${{ steps.check-nix-inputs.outputs.didTryToUpdateNixInputs }}' == 'yes' ]]; then
              echo "shouldPushUpdates=yes" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ inputs.deploy-to-node }}" == "true" ]]; then
              echo "shouldDeployToNode=yes" >> $GITHUB_OUTPUT
          fi

      - name: Build profile for ${{ steps.variables.outputs.host }}
        if: steps.variables.outputs.shouldBuildNixos == 'yes'
        run: |
          if ! make HOST=${{ steps.variables.outputs.host }} nixos-build nixos-profile-path-info; then
              df -h
              sudo du -h -x --exclude=/tmp --threshold=10M --max-depth=3 / | sort -k1 -h
              exit 1
          fi

      - name: Import vault token
        if: steps.variables.outputs.shouldDeployToNode == 'yes'
        uses: hashicorp/vault-action@v2.7.3
        with:
          method: "approle"
          url: "${{ secrets.VAULT_ADDR }}"
          roleId: "${{ secrets.VAULT_ROLE_ID }}"
          secretId: "${{ secrets.VAULT_SECRET_ID }}"
          exportToken: true
          exportEnv: true
          secrets: |
            ssh-host-signer/config/ca public_key | SSH_CA_PUBLIC_KEY ;

      - name: Deploy to node
        if: steps.variables.outputs.shouldDeployToNode == 'yes'
        env:
          VAULT_ADDR: "${{ secrets.VAULT_ADDR }}"
          SSH_CONFIG: "${{ secrets.SSH_CONFIG }}"
        run: |
          set -euo pipefail
          nix profile install -f . vault wstunnel openssh
          echo y | ssh-keygen -f $HOME/.ssh/id_ed25519 -t ed25519 -P ""
          vault write -field=signed_key ssh-client-signer/sign/ssh-deployment public_key=@$HOME/.ssh/id_ed25519.pub > $HOME/.ssh/id_ed25519-cert.pub
          echo "$SSH_CONFIG" >> ~/.ssh/config
          echo "@cert-authority * $SSH_CA_PUBLIC_KEY" >> ~/.ssh/known_hosts

          # Following step require this.
          find ~ -wholename '*/dist/main/push-paths.sh'
          find ~ -wholename '*/dist/main/push-paths.sh' -exec {} "$HOME/.nix-profile/bin/cachix" "${{ github.repository_owner }}" "clion|webstorm|idea-ultimate|goland|pycharm-professional|datagrip|android-studio-dev|graalvm11-ce|lock$|-source$" \;

          make NOFASTCONNECTION=y EXTRADEPLOYFLAGS="--ssh-user=$(ssh-keygen -Lf $HOME/.ssh/id_ed25519-cert.pub | awk '/Principals:/ {getline; print $1}')" HOST="${{ steps.variables.outputs.host }}" nixos-deploy

      - name: Push commit with updated inputs
        if: steps.variables.outputs.shouldPushUpdates == 'yes'
        run: |
          # Flake upstreams may update dependencies. In that case, `flake.lock` may have been changed.
          if git --no-pager diff; then
              git commit --all --amend --no-edit
          fi
          git push --force origin ${{ steps.variables.outputs.branch }}:${{ steps.variables.outputs.branch }}
          git switch -C ${{ steps.variables.outputs.nixSystem }}
          git push --force origin ${{ steps.variables.outputs.nixSystem }}:${{ steps.variables.outputs.nixSystem }}
