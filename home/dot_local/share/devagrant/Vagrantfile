# -*- mode: ruby -*-
# vi: set ft=ruby :

HOME = ENV["HOME"]
HOST = `hostname`.strip
WORKSPACE = File.join(HOME, "Workspace")

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "archlinux/archlinux"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 22, host: 11122

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  if File.directory?(WORKSPACE)
    # config.vm.synced_folder WORKSPACE, "/workspace"
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  if HOST == "bison"
    # config.vm.disk :disk, size: "100GB", primary: true
    config.vm.provider "libvirt" do |v|
      # Below operations are required to really resize the disk.
      # On host:
      # shut down the virtual machine
      # sudo modprobe nbd max_part=10
      # sudo qemu-nbd -c /dev/nbd0 /var/lib/libvirt/images/devagrant_default.img
      # sudo parted /dev/nbd0 resizepart 3 100%
      # Warning: Not all of the space available to /dev/nbd0 appears to be used, you can fix the GPT to use all of the space (an extra
      # 167772160 blocks) or continue with the current setting?
      # Fix/Ignore? Fix
      # Partition number? 3
      # End?  [21.5GB]? 100%
      # Information: You may need to update /etc/fstab.
      # sudo qemu-nbd -d /dev/nbd0
      #
      # On guest:
      # sudo btrfs filesystem resize max /
      v.machine_virtual_size = 100
      v.memory = 64*1024
      v.cpus = 12
      v.nested = true
    end
  end
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", name: "pacman", env: { "VM_HOST" => HOST }, inline: <<-SHELL
    p() { pacman --needed --noconfirm "$@"; }
    p -Syu
    p -Sy tmux neovim chezmoi git make tree-sitter fzf ripgrep zsh unzip atool helix curl wget
    # The helix binary is officially hx. Arch linux named it helix.
    ln -sf $(command -v helix) /usr/local/bin/hx
    case "$VM_HOST" in
      bison)
        p -Sy bear gcc llvm clang rustup go nodejs npm wakatime emacs
        ;;
      *)
        ;;
    esac
  SHELL

  config.vm.provision "shell", name: "locale-gen", inline: <<-SHELL
    sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
    locale-gen
  SHELL

  config.vm.provision "shell", name: "chezmoi", privileged: false, inline: <<-SHELL
    # chezmoi init contrun/dotfiles
    # chsh -s $(command -v zsh)
    # ln -sf ~/.tmux/.tmux.conf ~
  SHELL
end
